-- 1. Create profiles table linked to auth.users
CREATE TABLE public.profiles (
  id uuid NOT NULL REFERENCES auth.users ON DELETE CASCADE,
  updated_at timestamptz,
  username text UNIQUE,
  full_name text,
  avatar_url text,
  role text DEFAULT 'user'::text, -- Added role column ('user' or 'admin')

  PRIMARY KEY (id),
  CONSTRAINT username_length CHECK (char_length(username) >= 3)
);

-- Function to automatically create a profile when a new user signs up
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER SET search_path = public
AS $$
BEGIN
  INSERT INTO public.profiles (id, role)
  VALUES (new.id, 'user'); -- Default role is 'user'
  RETURN new;
END;
$$;

-- Trigger the function upon new user creation in auth.users
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- Enable RLS for profiles table
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

-- Allow users to view their own profile
CREATE POLICY "Users can view their own profile." ON public.profiles
  FOR SELECT USING (auth.uid() = id);

-- Allow users to update their own profile
CREATE POLICY "Users can update their own profile." ON public.profiles
  FOR UPDATE USING (auth.uid() = id) WITH CHECK (auth.uid() = id);

-- 2. Create recipes table
CREATE TABLE public.recipes (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid NOT NULL REFERENCES public.profiles ON DELETE CASCADE,
  created_at timestamptz DEFAULT now() NOT NULL,
  updated_at timestamptz DEFAULT now() NOT NULL,
  title text NOT NULL,
  description text,
  ingredients jsonb, -- Store ingredients as JSON array or object
  instructions text,
  prep_time_minutes integer,
  cook_time_minutes integer,
  image_url text -- Link to storage bucket
);

-- Enable RLS for recipes table
ALTER TABLE public.recipes ENABLE ROW LEVEL SECURITY;

-- Allow users to view all recipes (adjust if needed)
CREATE POLICY "Users can view all recipes." ON public.recipes
  FOR SELECT USING (true);

-- Allow users to insert their own recipes
CREATE POLICY "Users can insert their own recipes." ON public.recipes
  FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Allow users to update their own recipes
CREATE POLICY "Users can update their own recipes." ON public.recipes
  FOR UPDATE USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

-- Allow users to delete their own recipes
CREATE POLICY "Users can delete their own recipes." ON public.recipes
  FOR DELETE USING (auth.uid() = user_id);

-- Add indexes for common queries
CREATE INDEX idx_recipes_user_id ON public.recipes(user_id);
CREATE INDEX idx_recipes_title ON public.recipes USING gin (to_tsvector('english', title)); -- For full-text search on title

-- 3. Create notes table
CREATE TABLE public.notes (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid NOT NULL REFERENCES public.profiles ON DELETE CASCADE,
  recipe_id bigint REFERENCES public.recipes ON DELETE SET NULL, -- Optional link to a recipe
  created_at timestamptz DEFAULT now() NOT NULL,
  updated_at timestamptz DEFAULT now() NOT NULL,
  title text,
  content text NOT NULL
);

-- Enable RLS for notes table
ALTER TABLE public.notes ENABLE ROW LEVEL SECURITY;

-- Allow users to view their own notes
CREATE POLICY "Users can view their own notes." ON public.notes
  FOR SELECT USING (auth.uid() = user_id);

-- Allow users to insert their own notes
CREATE POLICY "Users can insert their own notes." ON public.notes
  FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Allow users to update their own notes
CREATE POLICY "Users can update their own notes." ON public.notes
  FOR UPDATE USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

-- Allow users to delete their own notes
CREATE POLICY "Users can delete their own notes." ON public.notes
  FOR DELETE USING (auth.uid() = user_id);

-- Add indexes for common queries
CREATE INDEX idx_notes_user_id ON public.notes(user_id);
CREATE INDEX idx_notes_recipe_id ON public.notes(recipe_id);

-- Function to update 'updated_at' timestamp
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updated_at = now();
   RETURN NEW;
END;
$$ language 'plpgsql';

-- Triggers to update 'updated_at' on recipes and notes tables
CREATE TRIGGER update_recipes_updated_at BEFORE UPDATE
ON public.recipes FOR EACH ROW EXECUTE PROCEDURE
public.update_updated_at_column();

CREATE TRIGGER update_notes_updated_at BEFORE UPDATE
ON public.notes FOR EACH ROW EXECUTE PROCEDURE
public.update_updated_at_column();

-- Grant usage permissions for anon and authenticated roles
GRANT USAGE ON SCHEMA public TO anon, authenticated;
GRANT SELECT ON TABLE public.profiles TO anon, authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.recipes TO authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.notes TO authenticated;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO authenticated;

-- Allow authenticated users to call the handle_new_user function (implicitly via trigger)
-- Allow authenticated users to call the update_updated_at_column function (implicitly via trigger)

-- Note: RLS policies supersede table-level grants.
-- Admins would typically bypass RLS or have specific admin policies.
-- You can update the 'role' column in the 'profiles' table manually for admin users.
